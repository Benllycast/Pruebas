CCS PCM C Compiler, Version 4.105, 13255               17-Abr-13 10:16

               Filename: G:\Project\pic\CCS\Pruebas\mma7455\slave_ACCspi.lst

               ROM used: 366 words (4%)
                         Largest free fragment is 2048
               RAM used: 45 (12%) at main() level
                         48 (13%) worst case
               Stack:    1 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   08C
0003:  NOP
.................... #include "slave_ACCspi.h" 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES HS                    	//High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES NOPUT                 	//No Power Up Timer 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES NOWRT                 	//Program memory not write protected 
.................... #FUSES RESERVED              	//Used to set the reserved FUSE bits 
....................  
....................  
.................... #use delay(clock=4000000) 
.................... #use rs232(baud=9600,UART1) 
....................  
....................  
.................... #define DATA_IN   PIN_D4 
.................... #define DATA_OUT   PIN_D5 
.................... #define DATA_SCL   PIN_D6 
.................... #define DATA_SS   PIN_D7 
.................... #define SPI_MODE_0  (SPI_L_TO_H | SPI_XMIT_L_TO_H)  
.................... #define SPI_MODE_1  (SPI_L_TO_H)  
.................... #define SPI_MODE_2  (SPI_H_TO_L)  
.................... #define SPI_MODE_3  (SPI_H_TO_L | SPI_XMIT_L_TO_H)  
.................... //#use spi(SLAVE, STREAM=PUERTO, MODE=0, DI=DATA_IN, DO=DATA_OUT, CLK=DATA_SCL, ENABLE=DATA_SS, BITS=8, BAUD=9600) 
.................... char memoria_mma[32]; 
.................... void main() 
.................... { 
*
0017:  DATA 00,00
*
008C:  CLRF   04
008D:  BCF    03.7
008E:  MOVLW  1F
008F:  ANDWF  03,F
0090:  MOVLW  19
0091:  BSF    03.5
0092:  MOVWF  19
0093:  MOVLW  A6
0094:  MOVWF  18
0095:  MOVLW  90
0096:  BCF    03.5
0097:  MOVWF  18
0098:  BSF    03.5
0099:  BSF    1F.0
009A:  BSF    1F.1
009B:  BSF    1F.2
009C:  BCF    1F.3
009D:  MOVLW  07
009E:  MOVWF  1C
*
00A2:  CLRF   41
00A3:  CLRF   42
00A4:  CLRF   43
00A5:  CLRF   44
00A6:  CLRF   45
.................... 	int8 addres = 0, data= 0, in = 0, w = 0, i = 0; 
....................    setup_adc_ports(AN0_AN1_AN3); 
00A7:  BSF    03.5
00A8:  BCF    1F.0
00A9:  BCF    1F.1
00AA:  BSF    1F.2
00AB:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_2); 
00AC:  BCF    1F.6
00AD:  BCF    03.5
00AE:  BCF    1F.6
00AF:  BCF    1F.7
00B0:  BSF    03.5
00B1:  BSF    1F.7
00B2:  BCF    03.5
00B3:  BSF    1F.0
....................    setup_psp(PSP_DISABLED); 
00B4:  BSF    03.5
00B5:  BCF    09.4
....................    setup_spi(SPI_SLAVE|SPI_MODE_3); 
00B6:  BCF    03.5
00B7:  BCF    14.5
00B8:  BCF    40.5
00B9:  MOVF   40,W
00BA:  BSF    03.5
00BB:  MOVWF  07
00BC:  BCF    03.5
00BD:  BSF    40.4
00BE:  MOVF   40,W
00BF:  BSF    03.5
00C0:  MOVWF  07
00C1:  BSF    05.5
00C2:  BCF    03.5
00C3:  BSF    40.3
00C4:  MOVF   40,W
00C5:  BSF    03.5
00C6:  MOVWF  07
00C7:  MOVLW  34
00C8:  BCF    03.5
00C9:  MOVWF  14
00CA:  MOVLW  00
00CB:  BSF    03.5
00CC:  MOVWF  14
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1); 
00CD:  MOVF   01,W
00CE:  ANDLW  C7
00CF:  IORLW  08
00D0:  MOVWF  01
....................    setup_timer_1(T1_DISABLED); 
00D1:  BCF    03.5
00D2:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
00D3:  MOVLW  00
00D4:  MOVWF  78
00D5:  MOVWF  12
00D6:  MOVLW  00
00D7:  BSF    03.5
00D8:  MOVWF  12
....................    setup_ccp1(CCP_OFF); 
00D9:  BCF    03.5
00DA:  BSF    40.2
00DB:  MOVF   40,W
00DC:  BSF    03.5
00DD:  MOVWF  07
00DE:  BCF    03.5
00DF:  CLRF   17
....................    setup_comparator(NC_NC_NC_NC); 
00E0:  MOVLW  07
00E1:  BSF    03.5
00E2:  MOVWF  1C
00E3:  MOVF   05,W
00E4:  MOVWF  05
00E5:  MOVLW  03
00E6:  MOVWF  77
00E7:  DECFSZ 77,F
00E8:  GOTO   0E7
00E9:  MOVF   1C,W
00EA:  BCF    03.5
00EB:  BCF    0D.6
....................    setup_vref(FALSE); 
00EC:  BSF    03.5
00ED:  CLRF   1D
.................... 	setup_uart(9600); 
00EE:  MOVLW  19
00EF:  MOVWF  19
00F0:  MOVLW  A6
00F1:  MOVWF  18
....................    // TODO: USER CODE!! 
....................    //memset(memoria_mma, 0, sizeof(memoria_mma)); 
....................    for(i = 0; i < sizeof(memoria_mma);++i)memoria_mma[i] = i; 
00F2:  BCF    03.5
00F3:  CLRF   45
00F4:  MOVF   45,W
00F5:  SUBLW  1F
00F6:  BTFSS  03.0
00F7:  GOTO   100
00F8:  MOVLW  20
00F9:  ADDWF  45,W
00FA:  MOVWF  04
00FB:  BCF    03.7
00FC:  MOVF   45,W
00FD:  MOVWF  00
00FE:  INCF   45,F
00FF:  GOTO   0F4
....................    do{ 
....................    	if(spi_data_is_in()){ 
0100:  BSF    03.5
0101:  BTFSS  14.0
0102:  GOTO   16B
....................    		in = spi_read(); 
0103:  BCF    03.5
0104:  MOVF   13,W
0105:  MOVWF  43
....................          addres = ((in >> 1) & 0x3F); 
0106:  BCF    03.0
0107:  RRF    43,W
0108:  ANDLW  3F
0109:  MOVWF  41
....................          if((in & 0x80)){ 
010A:  BTFSS  43.7
010B:  GOTO   137
....................             while(!spi_data_is_in()); 
010C:  BSF    03.5
010D:  BTFSS  14.0
010E:  GOTO   10D
....................             data = spi_read(); 
010F:  BCF    03.5
0110:  MOVF   13,W
0111:  MOVWF  42
....................             memoria_mma[addres] = data; 
0112:  MOVLW  20
0113:  ADDWF  41,W
0114:  MOVWF  04
0115:  BCF    03.7
0116:  MOVF   42,W
0117:  MOVWF  00
....................             printf("\n\rW: ad: %x dt: %x",addres,data); 
0118:  MOVLW  04
0119:  BSF    03.6
011A:  MOVWF  0D
011B:  MOVLW  00
011C:  MOVWF  0F
011D:  BCF    03.0
011E:  MOVLW  09
011F:  BCF    03.6
0120:  MOVWF  47
0121:  CALL   018
0122:  MOVF   41,W
0123:  MOVWF  47
0124:  MOVLW  57
0125:  MOVWF  48
0126:  CALL   069
0127:  MOVLW  09
0128:  BSF    03.6
0129:  MOVWF  0D
012A:  MOVLW  00
012B:  MOVWF  0F
012C:  BSF    03.0
012D:  MOVLW  05
012E:  BCF    03.6
012F:  MOVWF  47
0130:  CALL   018
0131:  MOVF   42,W
0132:  MOVWF  47
0133:  MOVLW  57
0134:  MOVWF  48
0135:  CALL   069
....................          }else{ 
0136:  GOTO   16C
....................             spi_write(memoria_mma[addres]); 
0137:  MOVLW  20
0138:  ADDWF  41,W
0139:  MOVWF  04
013A:  BCF    03.7
013B:  MOVF   00,W
013C:  MOVWF  46
013D:  MOVF   46,W
013E:  MOVWF  13
013F:  BSF    03.5
0140:  RRF    14,W
0141:  BTFSS  03.0
0142:  GOTO   140
....................             printf("\n\rR: ad: %x dt: %x",addres,memoria_mma[addres]); 
0143:  MOVLW  20
0144:  BCF    03.5
0145:  ADDWF  41,W
0146:  MOVWF  04
0147:  BCF    03.7
0148:  MOVF   00,W
0149:  MOVWF  46
014A:  MOVLW  0E
014B:  BSF    03.6
014C:  MOVWF  0D
014D:  MOVLW  00
014E:  MOVWF  0F
014F:  BCF    03.0
0150:  MOVLW  09
0151:  BCF    03.6
0152:  MOVWF  47
0153:  CALL   018
0154:  MOVF   41,W
0155:  MOVWF  47
0156:  MOVLW  57
0157:  MOVWF  48
0158:  CALL   069
0159:  MOVLW  13
015A:  BSF    03.6
015B:  MOVWF  0D
015C:  MOVLW  00
015D:  MOVWF  0F
015E:  BSF    03.0
015F:  MOVLW  05
0160:  BCF    03.6
0161:  MOVWF  47
0162:  CALL   018
0163:  MOVF   46,W
0164:  MOVWF  47
0165:  MOVLW  57
0166:  MOVWF  48
0167:  CALL   069
....................             while(!spi_data_is_in()); 
0168:  BSF    03.5
0169:  BTFSS  14.0
016A:  GOTO   169
016B:  BCF    03.5
....................          } 
....................    		//printf("\n\rrc: %x tr:%x",r,p); 
....................    	} 
....................    }while(1); 
.................... } 
016C:  GOTO   100
016D:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
